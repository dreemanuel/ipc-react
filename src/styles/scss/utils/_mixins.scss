@use 'variables' as *;

// Flexbox mixin
@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
    & {
        display: flex;
        flex-direction: $direction;
        justify-content: $justify;
        align-items: $align;
    }
}

// Container mixin
@mixin container {
    & {
        width: 100%;
        max-width: $container-max-width;
        margin: 0 auto;
        padding: 0 $container-padding;
    }
}

// Media query mixins
@mixin respond-to($breakpoint) {
    @if $breakpoint == sm {
        @media (min-width: $breakpoint-sm) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == md {
        @media (min-width: $breakpoint-md) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == lg {
        @media (min-width: $breakpoint-lg) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == xl {
        @media (min-width: $breakpoint-xl) { 
            & { 
                @content; 
            } 
        }
    }
}

@mixin respond-to-max($breakpoint) {
    @if $breakpoint == sm {
        @media (max-width: $breakpoint-sm - 1) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == md {
        @media (max-width: $breakpoint-md - 1) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == lg {
        @media (max-width: $breakpoint-lg - 1) { 
            & { 
                @content; 
            } 
        }
    } @else if $breakpoint == xl {
        @media (max-width: $breakpoint-xl - 1) { 
            & { 
                @content; 
            } 
        }
    }
}

// Typography mixins
@mixin heading-1 {
    & {
        font-family: $font-primary;
        font-size: 2.5rem;
        font-weight: 700;
        line-height: 1.2;
    }
    
    @include respond-to(md) {
        & {
            font-size: 3.5rem;
        }
    }
}

@mixin heading-2 {
    & {
        font-family: $font-primary;
        font-size: 2rem;
        font-weight: 700;
        line-height: 1.3;
    }
    
    @include respond-to(md) {
        & {
            font-size: 2.5rem;
        }
    }
}

@mixin heading-3 {
    & {
        font-family: $font-primary;
        font-size: 1.5rem;
        font-weight: 600;
        line-height: 1.4;
    }
    
    @include respond-to(md) {
        & {
            font-size: 2rem;
        }
    }
}

// Button mixins
@mixin button-base {
    & {
        display: inline-block;
        padding: $spacing-sm $spacing-lg;
        border-radius: $border-radius-sm;
        font-weight: 600;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        transition: all $transition-base;
    }
}

// Image mixins
@mixin image-cover {
    & {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

// Animation mixins
@mixin fade-in($duration: 0.3s, $delay: 0s) {
    & {
        opacity: 0;
        animation: fadeIn $duration ease forwards;
        animation-delay: $delay;
    }
}

@mixin slide-up($duration: 0.3s, $delay: 0s) {
    & {
        opacity: 0;
        transform: translateY(20px);
        animation: slideUp $duration ease forwards;
        animation-delay: $delay;
    }
}

// Shadow mixins
@mixin shadow-hover {
    & {
        transition: box-shadow $transition-base;
    }
    
    &:hover {
        & {
            box-shadow: $shadow-lg;
        }
    }
}

// Responsive breakpoints
@mixin section-padding {
    & {
        padding: $spacing-xl 0;
    }
}

// Hover effect
@mixin hover-effect {
    & {
        transition: transform $transition-normal, box-shadow $transition-normal;
    }
    
    &:hover {
        & {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
    }
}

// Button styles
@mixin button($bg-color: $primary-color, $text-color: $light-text) {
    @include button-base;
    & {
        background-color: $bg-color;
        color: $text-color;
    }
    
    &:hover {
        & {
            background-color: darken($bg-color, 10%);
            color: $text-color;
        }
    }
}

// Grid
@mixin grid($columns: 1, $gap: $spacing-md) {
    & {
        display: grid;
        grid-template-columns: repeat($columns, 1fr);
        gap: $gap;
    }
}
